# Copyright (C) 2008 Thomas F. Gordon, Fraunhofer FOKUS, Berlin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3 (LGPL-3)
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Version:  2.1

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

grammar {
    start = element lkif { 
        attribute version { xsd:string }?,  # version of the LKIF schema
        Sources?, Theory?, ArgumentGraphs? 
    }
    
    Sources = element sources { Source+ }
    
    Source = element source { attribute element { xsd:anyURI },
                              attribute uri { xsd:anyURI } }
    
    # RDF, OWL and LKIF files can be imported.  See below. 
    # The rules are inference rules. The resulting theory is 
    # the transitive closure of the axioms deduced using the rules.
    Theory = element theory { 
        attribute id { xsd:ID },
        Imports?, Axioms?, Rules?
    }

    Imports = element imports { Import+ }
    Axioms = element axioms { Axiom+ }
    Rules = element rules { Rule+ }
    
    # Import: the uri can refer to an RDF file, including OWL files in RDF format, 
    # an LKIF theory, an LKIF argument graph, or an entire LKIF file, in which case both the 
    # theory and the argument graph in the file are imported. 
    # When importing OWL files, not only the axioms of the ontology  
    # are imported but also any assertions about instances, the ABox. 

    Import = element import { 
      attribute url { xsd:anyURI } 
    }
    
    Axiom = element axiom { 
        attribute id { xsd:ID }, 
        Wff
    }
    
    ArgumentGraphs = element argument-graphs { ArgumentGraph+ }
    
    Rule = element rule { 
        attribute id { xsd:ID }, 
        attribute strict { xsd:boolean }?, # default: false
        Head, Domains?, Body?
    }
    
    Head = element head { Wff+ }
    Domains = element domains { Domain+ }
    Domain = (Class|Property)
    Body = element body { Wff+ }
    
    Class = element class {
    	   attribute pred { xsd:anyURI },
	       Variable, text?
    }

    Property = element property {
    	     attribute pred { xsd:anyURI },
	         (Variable | Constant
	         ), text?, Variable, text?
    }

    # Atomic formulas. Propositional logic letters are represented by 
    # omitting the (optional) predicate attribute.  The "s" tag
    # is used for backwards compatibility and because it is probably
    # more intuitive and mnemonic for most users.
    # An assumable atom is assumed when an argument having this atom
    # as a premise is put forward into an argument graph, unless there is already
    # an issue for this atom in which case the value of the assumption attribute of 
    # the issue for this atom is 
    Atom = element s { 
        attribute pred { xsd:anyURI }?,
        attribute assumable { xsd:boolean}?,  # default: false
        ((text | Term)*) 
    }
    
    # Wffs are well-formed formulas of predicate logic, extended with exceptions and assumptions
    # Free variables are schema variables, i.e. inference rule variables; 
    # bound variables, using Exists or All, are first-order logic variables.
    # Wffs may also be variables, i.e. variables may range over Wffs, to
    # allow inference rules such as modus ponens to be represented.
    Wff = Atom | Or | And | Not | If | Iff | All | Exists | Variable
    Or = element or { attribute assumable { xsd:boolean }?,  #default: false
                      Wff, Wff+ }
    And = element and { attribute assumable { xsd:boolean }?,  #default: false
                        Wff, Wff+ }
    Not = element not { 
        attribute exception { xsd:boolean }?,  # default: false
        attribute assumable { xsd:boolean }?,  # default: false 
        Wff 
    }     
        
    If = element if { 
        attribute assumable { xsd:boolean }?,  #default: false
        Wff, Wff 
     }
                      
    Iff = element iff { 
        attribute assumable { xsd:boolean }?,  #default: false
        Wff, Wff 
    }
                        
    All = element all { 
        attribute assumable { xsd:boolean }?,  #default: false
        Variable, Atom, Wff 
    }
                        
    Exists = element exists { 
        attribute assumable { xsd:boolean }?,  #default: false,
        Variable, Atom, Wff 
     }
    
    # Terms include wffs, to support meta-level statements
    Term = Variable | Individual | Constant | Expression | Wff
    
    Variable = element v { xsd:Name }
    
    Individual = element i { 
        attribute value { xsd:anyURI },
        text
    }
    
    Constant = element c { 
        # attribute value { xsd:anySimpleType }
        xsd:Name | xsd:anyURI | xsd:string | xsd:boolean | xsd:integer | xsd:float 
     }
    
    # The functors and constants of expressions are represented by
    # URIs. Thus libraries of functions and operators can be
    # declared in OWL ontologies.  Standard LKIF functions and operators
    # could be part of the ontology of basic legal concepts.
    Expression = element expr { 
        attribute functor { xsd:anyURI },
        Term*  
    }
    
    # In addition to a set of arguments, argument graphs can now include the status
    # of issues, applicable proof standards and relative argument strengths.
    ArgumentGraph = element argument-graph { 
        attribute id { xsd:ID }?, 
        attribute title { xsd:string }?,
        attribute main-issue { xsd:anyURI }?, 
        Statements, Arguments
    }
    
    Statements = element statements { Statement+ }
    
    Statement = element statement { 
        attribute id { xsd:ID },
        attribute value { "unknown" | "true" | "false" }?,  # default: unknown
        attribute assumption { xsd:boolean }?, # default: false
        attribute standard { "SE" | "DV" | "PE" | "BRD" | "CCE" }?, # default: PE
        Atom
    }
         
    
    # Schemes and premise roles can be referenced using URIs.  They can be modeled
    # as instances in an OWL ontology.
    
    Arguments = element arguments { Argument* }
    Argument = element argument { 
    	attribute id { xsd:ID },
    	attribute title { xsd:string }?,
        attribute direction { "pro" | "con" }?,
        attribute scheme { xsd:anyURI | xsd:string }?,
        attribute weight { xsd:float }?,  # range: 0.0 bis 1.0; default: 0.5
        Conclusion, Premises
    }
    
    Premises = element premises { Premise* }
    
    Premise = element premise { 
        attribute polarity { "positive" | "negative" }?, # default: positive
        attribute type { "ordinary" | "exception" | "assumption" }?, # default: ordinary
        attribute role { xsd:anyURI | xsd:string }?,
        attribute statement { xsd:anyURI } 
     } 
                  
    Conclusion = element conclusion { attribute statement { xsd:anyURI }  }
}
