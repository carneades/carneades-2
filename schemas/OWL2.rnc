namespace ox = "http://www.w3.org/ns/owl2-xml"

Import = element ox:Import { attlist.Import, text }
attlist.Import &= empty
Ontology =
  element ox:Ontology {
    attlist.Ontology,
    Import*,
    (Annotation, Label, Comment, Deprecation)*,
    (Declaration,
     HasKey,
     EntityAnnotation,
     AnonymousIndividualAnnotation,
     (SubClassOf, EquivalentClasses, DisjointClasses, DisjointUnion),
     (SubObjectPropertyOf,
      EquivalentObjectProperties,
      DisjointObjectProperties,
      InverseObjectProperties,
      ObjectPropertyDomain,
      ObjectPropertyRange,
      FunctionalObjectProperty,
      InverseFunctionalObjectProperty,
      ReflexiveObjectProperty,
      IrreflexiveObjectProperty,
      SymmetricObjectProperty,
      AsymmetricObjectProperty,
      TransitiveObjectProperty),
     (SubDataPropertyOf,
      EquivalentDataProperties,
      DisjointDataProperties,
      DataPropertyDomain,
      DataPropertyRange,
      FunctionalDataProperty),
     (SameIndividual,
      DifferentIndividuals,
      ClassAssertion,
      ObjectPropertyAssertion,
      NegativeObjectPropertyAssertion,
      DataPropertyAssertion,
      NegativeDataPropertyAssertion))*
  }
attlist.Ontology &=
  attribute ontologyURI { text }?,
  attribute versionURI { text }?
Annotation =
  element ox:Annotation {
    attlist.Annotation,
    AnnotationProperty,
    (AnonymousIndividual
     | Literal
     | (Class,
        Datatype,
        ObjectProperty,
        DataProperty,
        AnnotationProperty,
        NamedIndividual)),
    (Annotation, Label, Comment, Deprecation)*
  }
attlist.Annotation &= empty
AnnotationProperty =
  element ox:AnnotationProperty { attlist.AnnotationProperty, empty }
attlist.AnnotationProperty &= attribute URI { text }
AnonymousIndividual =
  element ox:AnonymousIndividual { attlist.AnonymousIndividual, empty }
attlist.AnonymousIndividual &= attribute nodeID { text }
Literal = element ox:Literal { attlist.Literal, text }
attlist.Literal &= attribute datatypeURI { text }?
Class = element ox:Class { attlist.Class, empty }
attlist.Class &= attribute URI { text }
Datatype = element ox:Datatype { attlist.Datatype, empty }
attlist.Datatype &= attribute URI { text }
ObjectProperty =
  element ox:ObjectProperty { attlist.ObjectProperty, empty }
attlist.ObjectProperty &= attribute URI { text }
DataProperty = element ox:DataProperty { attlist.DataProperty, empty }
attlist.DataProperty &= attribute URI { text }
NamedIndividual =
  element ox:NamedIndividual { attlist.NamedIndividual, empty }
attlist.NamedIndividual &= attribute URI { text }
Label =
  element ox:Label {
    attlist.Label, Literal, (Annotation, Label, Comment, Deprecation)*
  }
attlist.Label &= empty
Comment =
  element ox:Comment {
    attlist.Comment, Literal, (Annotation, Label, Comment, Deprecation)*
  }
attlist.Comment &= empty
Deprecation =
  element ox:Deprecation {
    attlist.Deprecation, (Annotation, Label, Comment, Deprecation)*
  }
attlist.Deprecation &= empty
Declaration =
  element ox:Declaration {
    attlist.Declaration,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     Datatype,
     ObjectProperty,
     DataProperty,
     AnnotationProperty,
     NamedIndividual)
  }
attlist.Declaration &= empty
HasKey =
  element ox:HasKey {
    attlist.HasKey,
    ((ObjectProperty, InverseObjectProperty) | DataProperty)+,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.HasKey &= empty
InverseObjectProperty =
  element ox:InverseObjectProperty {
    attlist.InverseObjectProperty, ObjectProperty
  }
attlist.InverseObjectProperty &= empty
ObjectIntersectionOf =
  element ox:ObjectIntersectionOf {
    attlist.ObjectIntersectionOf,
    Class,
    ObjectIntersectionOf,
    ObjectUnionOf,
    ObjectComplementOf,
    ObjectOneOf,
    ObjectSomeValuesFrom,
    ObjectAllValuesFrom,
    ObjectHasValue,
    ObjectExistsSelf,
    ObjectMinCardinality,
    ObjectMaxCardinality,
    ObjectExactCardinality,
    DataSomeValuesFrom,
    DataAllValuesFrom,
    DataHasValue,
    DataMinCardinality,
    DataMaxCardinality,
    DataExactCardinality
  }
attlist.ObjectIntersectionOf &= empty
ObjectUnionOf =
  element ox:ObjectUnionOf {
    attlist.ObjectUnionOf,
    Class,
    ObjectIntersectionOf,
    ObjectUnionOf,
    ObjectComplementOf,
    ObjectOneOf,
    ObjectSomeValuesFrom,
    ObjectAllValuesFrom,
    ObjectHasValue,
    ObjectExistsSelf,
    ObjectMinCardinality,
    ObjectMaxCardinality,
    ObjectExactCardinality,
    DataSomeValuesFrom,
    DataAllValuesFrom,
    DataHasValue,
    DataMinCardinality,
    DataMaxCardinality,
    DataExactCardinality
  }
attlist.ObjectUnionOf &= empty
ObjectComplementOf =
  element ox:ObjectComplementOf {
    attlist.ObjectComplementOf,
    Class,
    ObjectIntersectionOf,
    ObjectUnionOf,
    ObjectComplementOf,
    ObjectOneOf,
    ObjectSomeValuesFrom,
    ObjectAllValuesFrom,
    ObjectHasValue,
    ObjectExistsSelf,
    ObjectMinCardinality,
    ObjectMaxCardinality,
    ObjectExactCardinality,
    DataSomeValuesFrom,
    DataAllValuesFrom,
    DataHasValue,
    DataMinCardinality,
    DataMaxCardinality,
    DataExactCardinality
  }
attlist.ObjectComplementOf &= empty
ObjectOneOf =
  element ox:ObjectOneOf {
    attlist.ObjectOneOf, (NamedIndividual, AnonymousIndividual)+
  }
attlist.ObjectOneOf &= empty
ObjectSomeValuesFrom =
  element ox:ObjectSomeValuesFrom {
    attlist.ObjectSomeValuesFrom,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.ObjectSomeValuesFrom &= empty
ObjectAllValuesFrom =
  element ox:ObjectAllValuesFrom {
    attlist.ObjectAllValuesFrom,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.ObjectAllValuesFrom &= empty
ObjectHasValue =
  element ox:ObjectHasValue {
    attlist.ObjectHasValue,
    (ObjectProperty, InverseObjectProperty),
    (NamedIndividual, AnonymousIndividual)
  }
attlist.ObjectHasValue &= empty
ObjectExistsSelf =
  element ox:ObjectExistsSelf {
    attlist.ObjectExistsSelf, ObjectProperty, InverseObjectProperty
  }
attlist.ObjectExistsSelf &= empty
ObjectMinCardinality =
  element ox:ObjectMinCardinality {
    attlist.ObjectMinCardinality,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)?
  }
attlist.ObjectMinCardinality &= attribute cardinality { text }
ObjectMaxCardinality =
  element ox:ObjectMaxCardinality {
    attlist.ObjectMaxCardinality,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)?
  }
attlist.ObjectMaxCardinality &= attribute cardinality { text }
ObjectExactCardinality =
  element ox:ObjectExactCardinality {
    attlist.ObjectExactCardinality,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)?
  }
attlist.ObjectExactCardinality &= attribute cardinality { text }
DataSomeValuesFrom =
  element ox:DataSomeValuesFrom {
    attlist.DataSomeValuesFrom,
    DataProperty+,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)
  }
attlist.DataSomeValuesFrom &= empty
DataComplementOf =
  element ox:DataComplementOf {
    attlist.DataComplementOf,
    Datatype,
    DataComplementOf,
    DataOneOf,
    DatatypeRestriction
  }
attlist.DataComplementOf &= empty
DataOneOf = element ox:DataOneOf { attlist.DataOneOf, Literal+ }
attlist.DataOneOf &= empty
DatatypeRestriction =
  element ox:DatatypeRestriction {
    attlist.DatatypeRestriction, Datatype, FacetRestriction+
  }
attlist.DatatypeRestriction &= empty
FacetRestriction =
  element ox:FacetRestriction { attlist.FacetRestriction, Literal }
attlist.FacetRestriction &= attribute facet { text }
DataAllValuesFrom =
  element ox:DataAllValuesFrom {
    attlist.DataAllValuesFrom,
    DataProperty+,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)
  }
attlist.DataAllValuesFrom &= empty
DataHasValue =
  element ox:DataHasValue {
    attlist.DataHasValue, Literal, DataProperty
  }
attlist.DataHasValue &= empty
DataMinCardinality =
  element ox:DataMinCardinality {
    attlist.DataMinCardinality,
    DataProperty,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)?
  }
attlist.DataMinCardinality &= attribute cardinality { text }
DataMaxCardinality =
  element ox:DataMaxCardinality {
    attlist.DataMaxCardinality,
    DataProperty,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)?
  }
attlist.DataMaxCardinality &= attribute cardinality { text }
DataExactCardinality =
  element ox:DataExactCardinality {
    attlist.DataExactCardinality,
    DataProperty,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)?
  }
attlist.DataExactCardinality &= attribute cardinality { text }
EntityAnnotation =
  element ox:EntityAnnotation {
    attlist.EntityAnnotation,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     Datatype,
     ObjectProperty,
     DataProperty,
     AnnotationProperty,
     NamedIndividual),
    (Annotation, Label, Comment, Deprecation)+
  }
attlist.EntityAnnotation &= empty
AnonymousIndividualAnnotation =
  element ox:AnonymousIndividualAnnotation {
    attlist.AnonymousIndividualAnnotation,
    AnonymousIndividual,
    (Annotation, Label, Comment, Deprecation)*,
    (Annotation, Label, Comment, Deprecation)+
  }
attlist.AnonymousIndividualAnnotation &= empty
SubClassOf =
  element ox:SubClassOf {
    attlist.SubClassOf,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.SubClassOf &= empty
EquivalentClasses =
  element ox:EquivalentClasses {
    attlist.EquivalentClasses,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.EquivalentClasses &= empty
DisjointClasses =
  element ox:DisjointClasses {
    attlist.DisjointClasses,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.DisjointClasses &= empty
DisjointUnion =
  element ox:DisjointUnion {
    attlist.DisjointUnion,
    Class,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.DisjointUnion &= empty
SubObjectPropertyOf =
  element ox:SubObjectPropertyOf {
    attlist.SubObjectPropertyOf,
    (PropertyChain | (ObjectProperty, InverseObjectProperty)),
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.SubObjectPropertyOf &= empty
PropertyChain =
  element ox:PropertyChain {
    attlist.PropertyChain, ObjectProperty, InverseObjectProperty
  }
attlist.PropertyChain &= empty
EquivalentObjectProperties =
  element ox:EquivalentObjectProperties {
    attlist.EquivalentObjectProperties,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.EquivalentObjectProperties &= empty
DisjointObjectProperties =
  element ox:DisjointObjectProperties {
    attlist.DisjointObjectProperties,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.DisjointObjectProperties &= empty
InverseObjectProperties =
  element ox:InverseObjectProperties {
    attlist.InverseObjectProperties,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.InverseObjectProperties &= empty
ObjectPropertyDomain =
  element ox:ObjectPropertyDomain {
    attlist.ObjectPropertyDomain,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.ObjectPropertyDomain &= empty
ObjectPropertyRange =
  element ox:ObjectPropertyRange {
    attlist.ObjectPropertyRange,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty),
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.ObjectPropertyRange &= empty
FunctionalObjectProperty =
  element ox:FunctionalObjectProperty {
    attlist.FunctionalObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.FunctionalObjectProperty &= empty
InverseFunctionalObjectProperty =
  element ox:InverseFunctionalObjectProperty {
    attlist.InverseFunctionalObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.InverseFunctionalObjectProperty &= empty
ReflexiveObjectProperty =
  element ox:ReflexiveObjectProperty {
    attlist.ReflexiveObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.ReflexiveObjectProperty &= empty
IrreflexiveObjectProperty =
  element ox:IrreflexiveObjectProperty {
    attlist.IrreflexiveObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.IrreflexiveObjectProperty &= empty
SymmetricObjectProperty =
  element ox:SymmetricObjectProperty {
    attlist.SymmetricObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.SymmetricObjectProperty &= empty
AsymmetricObjectProperty =
  element ox:AsymmetricObjectProperty {
    attlist.AsymmetricObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.AsymmetricObjectProperty &= empty
TransitiveObjectProperty =
  element ox:TransitiveObjectProperty {
    attlist.TransitiveObjectProperty,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty)
  }
attlist.TransitiveObjectProperty &= empty
SubDataPropertyOf =
  element ox:SubDataPropertyOf {
    attlist.SubDataPropertyOf,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty,
    DataProperty
  }
attlist.SubDataPropertyOf &= empty
EquivalentDataProperties =
  element ox:EquivalentDataProperties {
    attlist.EquivalentDataProperties,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty
  }
attlist.EquivalentDataProperties &= empty
DisjointDataProperties =
  element ox:DisjointDataProperties {
    attlist.DisjointDataProperties,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty
  }
attlist.DisjointDataProperties &= empty
DataPropertyDomain =
  element ox:DataPropertyDomain {
    attlist.DataPropertyDomain,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality)
  }
attlist.DataPropertyDomain &= empty
DataPropertyRange =
  element ox:DataPropertyRange {
    attlist.DataPropertyRange,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty,
    (Datatype, DataComplementOf, DataOneOf, DatatypeRestriction)
  }
attlist.DataPropertyRange &= empty
FunctionalDataProperty =
  element ox:FunctionalDataProperty {
    attlist.FunctionalDataProperty,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty
  }
attlist.FunctionalDataProperty &= empty
SameIndividual =
  element ox:SameIndividual {
    attlist.SameIndividual,
    (Annotation, Label, Comment, Deprecation)*,
    (NamedIndividual, AnonymousIndividual)
  }
attlist.SameIndividual &= empty
DifferentIndividuals =
  element ox:DifferentIndividuals {
    attlist.DifferentIndividuals,
    (Annotation, Label, Comment, Deprecation)*,
    (NamedIndividual, AnonymousIndividual)
  }
attlist.DifferentIndividuals &= empty
ClassAssertion =
  element ox:ClassAssertion {
    attlist.ClassAssertion,
    (Annotation, Label, Comment, Deprecation)*,
    (Class,
     ObjectIntersectionOf,
     ObjectUnionOf,
     ObjectComplementOf,
     ObjectOneOf,
     ObjectSomeValuesFrom,
     ObjectAllValuesFrom,
     ObjectHasValue,
     ObjectExistsSelf,
     ObjectMinCardinality,
     ObjectMaxCardinality,
     ObjectExactCardinality,
     DataSomeValuesFrom,
     DataAllValuesFrom,
     DataHasValue,
     DataMinCardinality,
     DataMaxCardinality,
     DataExactCardinality),
    (NamedIndividual, AnonymousIndividual)
  }
attlist.ClassAssertion &= empty
ObjectPropertyAssertion =
  element ox:ObjectPropertyAssertion {
    attlist.ObjectPropertyAssertion,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty),
    (NamedIndividual, AnonymousIndividual),
    (NamedIndividual, AnonymousIndividual)
  }
attlist.ObjectPropertyAssertion &= empty
NegativeObjectPropertyAssertion =
  element ox:NegativeObjectPropertyAssertion {
    attlist.NegativeObjectPropertyAssertion,
    (Annotation, Label, Comment, Deprecation)*,
    (ObjectProperty, InverseObjectProperty),
    (NamedIndividual, AnonymousIndividual),
    (NamedIndividual, AnonymousIndividual)
  }
attlist.NegativeObjectPropertyAssertion &= empty
DataPropertyAssertion =
  element ox:DataPropertyAssertion {
    attlist.DataPropertyAssertion,
    Literal,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty,
    (NamedIndividual, AnonymousIndividual)
  }
attlist.DataPropertyAssertion &= empty
NegativeDataPropertyAssertion =
  element ox:NegativeDataPropertyAssertion {
    attlist.NegativeDataPropertyAssertion,
    Literal,
    (Annotation, Label, Comment, Deprecation)*,
    DataProperty,
    (NamedIndividual, AnonymousIndividual)
  }
attlist.NegativeDataPropertyAssertion &= empty
start = Ontology
